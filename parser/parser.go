// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

// header of parser.y

import (
	"fmt"
	//"encoding/json"
	//"log"
	"strconv"
	"time"

	"github.com/udhos/gobule/conv"
)

type yySymType struct {
	yys        int
	typeBool   bool
	typeString string // holds: variable, number, or text
	typeScalar scalar
	typeList   []scalar
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault            = 57370
	yyEofCode            = 57344
	TkDot                = 57369
	TkEQ                 = 57363
	TkGE                 = 57367
	TkGT                 = 57365
	TkIdent              = 57358
	TkKeywordAnd         = 57349
	TkKeywordContains    = 57351
	TkKeywordCurrentTime = 57352
	TkKeywordFalse       = 57347
	TkKeywordList        = 57354
	TkKeywordNot         = 57350
	TkKeywordNumber      = 57353
	TkKeywordOr          = 57348
	TkKeywordTrue        = 57346
	TkKeywordVersion     = 57355
	TkLE                 = 57368
	TkLT                 = 57364
	TkNE                 = 57366
	TkNumber             = 57356
	TkParL               = 57359
	TkParR               = 57360
	TkSBktL              = 57361
	TkSBktR              = 57362
	TkText               = 57357
	yyErrCode            = 57345

	yyMaxDepth = 200
	yyTabOfs   = -29
)

var (
	yyPrec = map[int]int{
		TkKeywordOr:  0,
		TkKeywordAnd: 1,
	}

	yyXLAT = map[int]int{
		57360: 0,  // TkParR (33x)
		57359: 1,  // TkParL (29x)
		57356: 2,  // TkNumber (28x)
		57358: 3,  // TkIdent (27x)
		57352: 4,  // TkKeywordCurrentTime (25x)
		57353: 5,  // TkKeywordNumber (25x)
		57355: 6,  // TkKeywordVersion (25x)
		57357: 7,  // TkText (25x)
		57344: 8,  // $end (23x)
		57349: 9,  // TkKeywordAnd (23x)
		57348: 10, // TkKeywordOr (23x)
		57375: 11, // scalar_exp (16x)
		57350: 12, // TkKeywordNot (11x)
		57362: 13, // TkSBktR (11x)
		57363: 14, // TkEQ (9x)
		57367: 15, // TkGE (9x)
		57365: 16, // TkGT (9x)
		57368: 17, // TkLE (9x)
		57364: 18, // TkLT (9x)
		57366: 19, // TkNE (9x)
		57351: 20, // TkKeywordContains (7x)
		57371: 21, // bool_exp (5x)
		57373: 22, // list_exp (5x)
		57347: 23, // TkKeywordFalse (5x)
		57354: 24, // TkKeywordList (5x)
		57346: 25, // TkKeywordTrue (5x)
		57361: 26, // TkSBktL (5x)
		57369: 27, // TkDot (2x)
		57372: 28, // list (1x)
		57374: 29, // prog (1x)
		57370: 30, // $default (0x)
		57345: 31, // error (0x)
	}

	yySymNames = []string{
		"TkParR",
		"TkParL",
		"TkNumber",
		"TkIdent",
		"TkKeywordCurrentTime",
		"TkKeywordNumber",
		"TkKeywordVersion",
		"TkText",
		"$end",
		"TkKeywordAnd",
		"TkKeywordOr",
		"scalar_exp",
		"TkKeywordNot",
		"TkSBktR",
		"TkEQ",
		"TkGE",
		"TkGT",
		"TkLE",
		"TkLT",
		"TkNE",
		"TkKeywordContains",
		"bool_exp",
		"list_exp",
		"TkKeywordFalse",
		"TkKeywordList",
		"TkKeywordTrue",
		"TkSBktL",
		"TkDot",
		"list",
		"prog",
		"$default",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {29, 1},
		2:  {21, 3},
		3:  {21, 3},
		4:  {21, 3},
		5:  {21, 2},
		6:  {21, 1},
		7:  {21, 1},
		8:  {21, 3},
		9:  {21, 4},
		10: {21, 3},
		11: {21, 3},
		12: {21, 3},
		13: {21, 3},
		14: {21, 3},
		15: {21, 3},
		16: {22, 3},
		17: {22, 2},
		18: {22, 3},
		19: {22, 4},
		20: {28, 1},
		21: {28, 2},
		22: {11, 3},
		23: {11, 1},
		24: {11, 1},
		25: {11, 1},
		26: {11, 8},
		27: {11, 4},
		28: {11, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [67][]uint8{
		// 0
		{1: 32, 41, 42, 45, 44, 43, 40, 11: 37, 33, 21: 31, 36, 35, 39, 34, 38, 29: 30},
		{8: 29},
		{8: 28, 87, 88},
		{1: 32, 41, 42, 45, 44, 43, 40, 11: 93, 33, 21: 91, 92, 35, 39, 34, 38},
		{1: 32, 41, 42, 45, 44, 43, 40, 11: 37, 33, 21: 86, 36, 35, 39, 34, 38},
		// 5
		{23, 8: 23, 23, 23},
		{22, 8: 22, 22, 22},
		{12: 82, 20: 81},
		{14: 69, 72, 71, 74, 73, 70},
		{1: 64, 41, 42, 45, 44, 43, 40, 11: 63, 13: 61, 28: 62},
		// 10
		{1: 58},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 13: 6, 6, 6, 6, 6, 6, 6},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13: 5, 5, 5, 5, 5, 5, 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 13: 4, 4, 4, 4, 4, 4, 4},
		{1: 51},
		// 15
		{1: 48},
		{1: 46},
		{47},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13: 1, 1, 1, 1, 1, 1, 1},
		{3: 49},
		// 20
		{50},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 13: 2, 2, 2, 2, 2, 2, 2},
		{2: 52},
		{27: 53},
		{2: 54},
		// 25
		{27: 55},
		{2: 56},
		{57},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 13: 3, 3, 3, 3, 3, 3, 3},
		{3: 59},
		// 30
		{60},
		{10, 12: 10, 20: 10},
		{12, 12: 12, 20: 12},
		{1: 64, 41, 42, 45, 44, 43, 40, 11: 68, 13: 67},
		{1: 9, 9, 9, 9, 9, 9, 9, 13: 9},
		// 35
		{1: 64, 41, 42, 45, 44, 43, 40, 11: 65},
		{66},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 13: 7, 7, 7, 7, 7, 7, 7},
		{11, 12: 11, 20: 11},
		{1: 8, 8, 8, 8, 8, 8, 8, 13: 8},
		// 40
		{1: 64, 41, 42, 45, 44, 43, 40, 11: 80},
		{1: 64, 41, 42, 45, 44, 43, 40, 11: 79},
		{1: 64, 41, 42, 45, 44, 43, 40, 11: 78},
		{1: 64, 41, 42, 45, 44, 43, 40, 11: 77},
		{1: 64, 41, 42, 45, 44, 43, 40, 11: 76},
		// 45
		{1: 64, 41, 42, 45, 44, 43, 40, 11: 75},
		{14, 8: 14, 14, 14},
		{15, 8: 15, 15, 15},
		{16, 8: 16, 16, 16},
		{17, 8: 17, 17, 17},
		// 50
		{18, 8: 18, 18, 18},
		{19, 8: 19, 19, 19},
		{1: 64, 41, 42, 45, 44, 43, 40, 11: 85},
		{20: 83},
		{1: 64, 41, 42, 45, 44, 43, 40, 11: 84},
		// 55
		{20, 8: 20, 20, 20},
		{21, 8: 21, 21, 21},
		{24, 8: 24, 87, 88},
		{1: 32, 41, 42, 45, 44, 43, 40, 11: 37, 33, 21: 90, 36, 35, 39, 34, 38},
		{1: 32, 41, 42, 45, 44, 43, 40, 11: 37, 33, 21: 89, 36, 35, 39, 34, 38},
		// 60
		{25, 8: 25, 87, 88},
		{26, 8: 26, 87, 26},
		{95, 9: 87, 88},
		{94, 12: 82, 20: 81},
		{66, 14: 69, 72, 71, 74, 73, 70},
		// 65
		{13, 12: 13, 20: 13},
		{27, 8: 27, 27, 27},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 31

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yylex.(*Lex).result.Eval = yyS[yypt-0].typeBool
		}
	case 2:
		{
			yyVAL.typeBool = yyS[yypt-1].typeBool
		}
	case 3:
		{
			yyVAL.typeBool = yyS[yypt-2].typeBool && yyS[yypt-0].typeBool
		}
	case 4:
		{
			yyVAL.typeBool = yyS[yypt-2].typeBool || yyS[yypt-0].typeBool
		}
	case 5:
		{
			yyVAL.typeBool = !yyS[yypt-0].typeBool
		}
	case 6:
		{
			yyVAL.typeBool = true
		}
	case 7:
		{
			yyVAL.typeBool = false
		}
	case 8:
		{
			yyVAL.typeBool = contains(yyS[yypt-2].typeList, yyS[yypt-0].typeScalar)
		}
	case 9:
		{
			yyVAL.typeBool = !contains(yyS[yypt-3].typeList, yyS[yypt-0].typeScalar)
		}
	case 10:
		{
			yyVAL.typeBool = yyS[yypt-2].typeScalar.equals(yyS[yypt-0].typeScalar)
		}
	case 11:
		{
			yyVAL.typeBool = !yyS[yypt-2].typeScalar.equals(yyS[yypt-0].typeScalar)
		}
	case 12:
		{
			var eval bool
			if yyS[yypt-2].typeScalar.scalarType != yyS[yypt-0].typeScalar.scalarType {
				yylex.Error("greater-than operator for different types")
			} else {
				eval = yyS[yypt-2].typeScalar.greaterThan(yyS[yypt-0].typeScalar)
			}
			yyVAL.typeBool = eval
		}
	case 13:
		{
			var eval bool
			if yyS[yypt-2].typeScalar.scalarType != yyS[yypt-0].typeScalar.scalarType {
				yylex.Error("greater-than-or-equal operator for different types")
			} else {
				eval = !yyS[yypt-0].typeScalar.greaterThan(yyS[yypt-2].typeScalar)
			}
			yyVAL.typeBool = eval
		}
	case 14:
		{
			var eval bool
			if yyS[yypt-2].typeScalar.scalarType != yyS[yypt-0].typeScalar.scalarType {
				yylex.Error("less-than operator for different types")
			} else {
				eval = yyS[yypt-0].typeScalar.greaterThan(yyS[yypt-2].typeScalar)
			}
			yyVAL.typeBool = eval
		}
	case 15:
		{
			var eval bool
			if yyS[yypt-2].typeScalar.scalarType != yyS[yypt-0].typeScalar.scalarType {
				yylex.Error("less-than-or-equal operator for different types")
			} else {
				eval = !yyS[yypt-2].typeScalar.greaterThan(yyS[yypt-0].typeScalar)
			}
			yyVAL.typeBool = eval
		}
	case 16:
		{
			yyVAL.typeList = yyS[yypt-1].typeList
		}
	case 17:
		{
			yyVAL.typeList = []scalar{}
		}
	case 18:
		{
			yyVAL.typeList = yyS[yypt-1].typeList
		}
	case 19:
		{
			var list []scalar
			v := yyS[yypt-1].typeString
			l := yylex.(*Lex)
			if varValue, found := l.vars[v]; found {
				// found variable

				switch vv := varValue.(type) {
				case []interface{}:
					for i, elem := range vv {
						switch val := elem.(type) {
						case float64:
							list = append(list, scalar{scalarType: scalarNumber, number: int64(val)})
						case int:
							list = append(list, scalar{scalarType: scalarNumber, number: int64(val)})
						case string:
							list = append(list, scalar{scalarType: scalarText, text: val})
						default:
							yylex.Error(fmt.Sprintf("List(%s): invalid type for element %d: %v", v, i, elem))
						}
					}
				case []int:
					for _, elem := range vv {
						list = append(list, scalar{scalarType: scalarNumber, number: int64(elem)})
					}
				case []string:
					for _, elem := range vv {
						list = append(list, scalar{scalarType: scalarText, text: elem})
					}
				default:
					yylex.Error(fmt.Sprintf("List(%s): unexpected list type (%T): %v", v, varValue, varValue))
				}

			} else {
				yylex.Error(fmt.Sprintf("List(%s): variable undefined", v))
			}
			yyVAL.typeList = list
		}
	case 20:
		{
			l := yylex.(*Lex)
			l.scalarList = []scalar{yyS[yypt-0].typeScalar}
			yyVAL.typeList = l.scalarList
		}
	case 21:
		{
			l := yylex.(*Lex)
			l.scalarList = append(l.scalarList, yyS[yypt-0].typeScalar)
			yyVAL.typeList = l.scalarList
		}
	case 22:
		{
			yyVAL.typeScalar = yyS[yypt-1].typeScalar
		}
	case 23:
		{
			yyVAL.typeScalar = scalar{scalarType: scalarText, text: yyS[yypt-0].typeString}
		}
	case 24:
		{
			s := yyS[yypt-0].typeString
			n, errConv := parseInt(s)
			if errConv != nil {
				yylex.Error(fmt.Sprintf("bad number conversion: '%s': %v", s, errConv))
			}
			yyVAL.typeScalar = scalar{scalarType: scalarNumber, number: n}
		}
	case 25:
		{
			v := yyS[yypt-0].typeString
			l := yylex.(*Lex)
			value := scalar{scalarType: scalarText}
			if varValue, found := l.vars[v]; found {
				switch val := varValue.(type) {
				case string:
					value.text = val
				case int:
					value.text = strconv.Itoa(val)
				case int64:
					value.text = strconv.FormatInt(val, 10)
				case float64:
					value.text = strconv.FormatInt(int64(val), 10)
				default:
					yylex.Error(fmt.Sprintf("unexpected type='%T' for variable='%s' value='%v'", varValue, v, varValue))
				}
			} else {
				value.text = fmt.Sprintf("solving IDENT: variable undefined:'%s'", v)
				yylex.Error(value.text)
			}
			yyVAL.typeScalar = value
		}
	case 26:
		{
			s1 := yyS[yypt-5].typeString
			s2 := yyS[yypt-3].typeString
			s3 := yyS[yypt-1].typeString

			v1, errConv1 := parseInt(s1)
			if errConv1 != nil {
				yylex.Error(fmt.Sprintf("bad Version(version) number conversion 1: '%s': %v", s1, errConv1))
			}
			v2, errConv2 := parseInt(s2)
			if errConv2 != nil {
				yylex.Error(fmt.Sprintf("bad Version(version) number conversion 2: '%s': %v", s2, errConv2))
			}
			v3, errConv3 := parseInt(s3)
			if errConv3 != nil {
				yylex.Error(fmt.Sprintf("bad Version(version) number conversion 3: '%s': %v", s3, errConv3))
			}

			yyVAL.typeScalar = scalar{scalarType: scalarNumber, number: conv.VersionToNumber(v1, v2, v3)}
		}
	case 27:
		{
			v := yyS[yypt-1].typeString
			l := yylex.(*Lex)
			value := scalar{scalarType: scalarNumber}
			if varValue, found := l.vars[v]; found {
				// found variable
				switch val := varValue.(type) {
				case string:
					n, errConv := parseInt(val)
					if errConv != nil {
						yylex.Error(fmt.Sprintf("bad Number(variable) conversion: %s='%s': %v", v, val, errConv))
					}
					value.number = n
				case int:
					value.number = int64(val)
				case int64:
					value.number = val
				case float64:
					value.number = int64(val)
				default:
					yylex.Error(fmt.Sprintf("unexpected Number(variable) var type: var='%s': value=%v type=%T", v, varValue, varValue))
				}
			} else {
				value.text = fmt.Sprintf("Number() variable undefined:'%s'", v)
				yylex.Error(value.text)
			}
			yyVAL.typeScalar = value
		}
	case 28:
		{
			now := time.Now()
			n := now.Hour()*10000 + now.Minute()*100 + now.Second()
			//fmt.Printf("currenttime: %d\n", n)
			yyVAL.typeScalar = scalar{scalarType: scalarNumber, number: int64(n)}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
